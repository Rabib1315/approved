
# VisaNavigator Development Guide for Next.js

## 🚀 Quick Start

### 1. Environment Setup
```bash
# Install dependencies
npm install

# Set up environment variables
cp .env.example .env
```

### 2. Database Configuration
Choose one of these options:

**Option A: Supabase Database (Recommended for Production)**
```bash
# Add to .env file
DATABASE_URL="postgresql://postgres:[YOUR-PASSWORD]@db.[YOUR-PROJECT-REF].supabase.co:5432/postgres"
SUPABASE_URL="https://[YOUR-PROJECT-REF].supabase.co"
SUPABASE_ANON_KEY="your-anon-key"
SUPABASE_SERVICE_ROLE_KEY="your-service-role-key"
```

**Option B: In-Memory Development (Quick Start)**
```bash
# Add to .env file
USE_MEMORY_STORAGE=true
```

### 3. Start Development Server
```bash
npm run dev
```

Your app will be available at `http://localhost:3000`

## 🏗️ Architecture Overview

VisaNavigator is built as a **mobile-first Canadian student visa application assistant** with these key components:

### Frontend Stack
- **Next.js 14 + React 18 + TypeScript** - Modern React with full type safety and app directory
- **Tailwind CSS** - Utility-first styling with Canadian theme colors
- **Radix UI + shadcn/ui** - Accessible, beautiful components
- **React Query** - Server state management and caching

### Backend Stack
- **Next.js API Routes** - RESTful API endpoints
- **Drizzle ORM** - Type-safe database operations
- **Supabase PostgreSQL** - Production database with real-time features
- **Zod** - Runtime type validation

## 📁 Project Structure

```
├── src/
│   ├── app/              # Next.js app directory
│   │   ├── globals.css   # Global styles
│   │   ├── layout.tsx    # Root layout
│   │   ├── page.tsx      # Landing page
│   │   ├── upload/       # Upload page
│   │   └── review/       # Review page
│   ├── components/       # UI components
│   │   ├── ui/          # shadcn/ui components
│   │   ├── landing-page.tsx
│   │   └── providers.tsx
│   ├── lib/             # Utilities and configs
│   ├── hooks/           # Custom React hooks
│   └── shared/          # Shared types and schemas
├── migrations/          # Database migrations
└── public/             # Static assets
```

## 🛠️ Development Workflow

### Running the Application

**Development Mode:**
```bash
npm run dev          # Starts Next.js development server
npm run build        # Build for production
npm run start        # Start production server
npm run lint         # Run ESLint
npm run type-check   # Run TypeScript checks
```

### Database Operations

**Run Migrations:**
```bash
npm run db:generate     # Generate migration files
npm run db:migrate      # Apply database migrations
npm run db:studio       # Open Drizzle Studio (database GUI)
npm run db:push         # Push schema changes
```

## 🎨 UI Development

### Component Library
We use **shadcn/ui** components built on Radix UI primitives:

```typescript
import { Button } from "@/components/ui/button"
import { Card } from "@/components/ui/card"
import { Input } from "@/components/ui/input"

// Example usage
<Card className="p-6">
  <Input placeholder="Enter your name" />
  <Button className="bg-ca-red hover:bg-ca-red/90">
    Continue
  </Button>
</Card>
```

### Adding New Components
```bash
# Add shadcn/ui components
npx shadcn-ui@latest add button
npx shadcn-ui@latest add card
npx shadcn-ui@latest add form
```

### Styling Guidelines
- **Mobile-first**: Design for 375px width, then scale up
- **Canadian theme**: Use `ca-red` and `ca-blue` color variables
- **Accessibility**: All components include proper ARIA labels
- **Responsive**: Use Tailwind responsive prefixes (`sm:`, `md:`, `lg:`)

## 🔄 State Management

### Server State (React Query)
```typescript
import { useQuery, useMutation } from '@tanstack/react-query'

// Fetch data
const { data, isLoading, error } = useQuery({
  queryKey: ['documents'],
  queryFn: () => fetch('/api/documents').then(res => res.json())
})

// Mutate data
const uploadMutation = useMutation({
  mutationFn: (file: File) => uploadDocument(file),
  onSuccess: () => {
    queryClient.invalidateQueries(['documents'])
  }
})
```

### Form State (React Hook Form + Zod)
```typescript
import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import { z } from 'zod'

const schema = z.object({
  fullName: z.string().min(1, "Name is required"),
  email: z.string().email("Invalid email")
})

const form = useForm({
  resolver: zodResolver(schema)
})
```

## 🗄️ Database Development with Supabase + Drizzle

### Initial Supabase Setup
1. **Create Supabase Project**: Go to [supabase.com](https://supabase.com) and create a new project
2. **Get Credentials**: Copy your project URL, anon key, and service role key
3. **Database URL**: Get your PostgreSQL connection string from Settings > Database

### Drizzle Configuration
```typescript
// src/lib/db.ts
import { drizzle } from 'drizzle-orm/postgres-js'
import postgres from 'postgres'

const connectionString = process.env.DATABASE_URL!
const client = postgres(connectionString)
export const db = drizzle(client)
```

### Supabase Client Setup
```typescript
// src/lib/supabase.ts
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = process.env.SUPABASE_URL!
const supabaseAnonKey = process.env.SUPABASE_ANON_KEY!

export const supabase = createClient(supabaseUrl, supabaseAnonKey)
```

### Schema Definition
All schemas are defined in `/shared/schema.ts` using Drizzle ORM:

```typescript
import { pgTable, text, timestamp, boolean } from 'drizzle-orm/pg-core'

export const users = pgTable('users', {
  id: text('id').primaryKey(),
  username: text('username').notNull().unique(),
  email: text('email').notNull().unique(),
  createdAt: timestamp('created_at').defaultNow()
})

export const applications = pgTable('applications', {
  id: text('id').primaryKey(),
  userId: text('user_id').references(() => users.id),
  status: text('status').notNull().default('draft'),
  documents: text('documents'), // JSON array of uploaded docs
  createdAt: timestamp('created_at').defaultNow()
})
```

### Database Queries with Drizzle
```typescript
import { db } from '@/lib/db'
import { users, applications } from '@/shared/schema'
import { eq } from 'drizzle-orm'

// Create user
const newUser = await db.insert(users).values({
  id: crypto.randomUUID(),
  username: 'maria_santos',
  email: 'maria@example.com'
}).returning()

// Find user applications
const userApps = await db
  .select()
  .from(applications)
  .where(eq(applications.userId, userId))
```

### File Upload with Supabase Storage
```typescript
import { supabase } from '@/lib/supabase'

// Upload document to Supabase Storage
const uploadDocument = async (file: File, userId: string) => {
  const fileName = `${userId}/${Date.now()}-${file.name}`

  const { data, error } = await supabase.storage
    .from('documents')
    .upload(fileName, file)

  if (error) throw error

  // Get public URL
  const { data: { publicUrl } } = supabase.storage
    .from('documents')
    .getPublicUrl(fileName)

  return { fileName, publicUrl }
}
```

### Real-time Updates
```typescript
// Listen for application status changes
useEffect(() => {
  const subscription = supabase
    .channel('applications')
    .on('postgres_changes', {
      event: 'UPDATE',
      schema: 'public',
      table: 'applications',
      filter: `user_id=eq.${userId}`
    }, (payload) => {
      console.log('Application updated:', payload.new)
      // Update UI state
    })
    .subscribe()

  return () => subscription.unsubscribe()
}, [userId])
```

## 📱 Mobile Development

### Responsive Design Patterns
```typescript
// Mobile-first component
const DocumentCard = () => (
  <div className="
    w-full p-4                    // Mobile
    sm:max-w-sm sm:p-6           // Small screens
    md:max-w-md                  // Medium screens
  ">
    <h3 className="text-lg sm:text-xl">Document Title</h3>
  </div>
)
```

### Touch Interactions
```typescript
// Touch-friendly upload areas
<div className="
  min-h-[120px]                 // Minimum touch target
  touch-manipulation            // Optimize touch events
  active:scale-95               // Touch feedback
  transition-transform
">
  Drag files here or tap to upload
</div>
```

## 🔌 API Development

### Creating API Endpoints
```typescript
// src/app/api/documents/route.ts
import { NextRequest, NextResponse } from 'next/server'
import { z } from 'zod'

const uploadSchema = z.object({
  file: z.instanceof(File),
  userId: z.string()
})

export async function POST(request: NextRequest) {
  try {
    const formData = await request.formData()
    const file = formData.get('file') as File
    const userId = formData.get('userId') as string

    // Process and save document
    const result = await uploadDocument(file, userId)
    
    return NextResponse.json({ success: true, documentId: result.fileName })
  } catch (error) {
    return NextResponse.json({ error: 'Upload failed' }, { status: 500 })
  }
}
```

### Error Handling
```typescript
// Custom error classes
export class ValidationError extends Error {
  constructor(message: string, public field: string) {
    super(message)
    this.name = 'ValidationError'
  }
}

// Global error handler
export function handleApiError(error: unknown) {
  if (error instanceof ValidationError) {
    return NextResponse.json({
      error: error.message,
      field: error.field
    }, { status: 400 })
  }
  // Handle other errors...
}
```

## 🧪 Testing

### Component Testing
```bash
npm run test              # Run all tests
npm run test:watch        # Watch mode
npm run test:coverage     # Coverage report
```

### API Testing
```typescript
// Test API endpoints
describe('Documents API', () => {
  test('should upload document', async () => {
    const formData = new FormData()
    formData.append('file', new File(['test'], 'test.pdf'))
    formData.append('userId', 'test-user')

    const response = await fetch('/api/documents', {
      method: 'POST',
      body: formData
    })

    expect(response.status).toBe(200)
    const data = await response.json()
    expect(data.success).toBe(true)
  })
})
```

## 🚢 Deployment

### Vercel Deployment (Recommended)
1. **Connect Repository**: Link your GitHub repo to Vercel
2. **Environment Variables**: Set Supabase credentials in Vercel dashboard
3. **Automatic Deployments**: Vercel auto-deploys on push to main branch

### Production Checklist
- [ ] Set Supabase credentials in environment variables
- [ ] Configure Supabase Storage policies
- [ ] Set up Row Level Security (RLS) policies
- [ ] Configure session secret: `SESSION_SECRET`
- [ ] Set `NODE_ENV=production`
- [ ] Test file upload limits in Supabase Storage
- [ ] Verify mobile responsiveness
- [ ] Check API rate limiting
- [ ] Set up Supabase database backups

## 🐛 Debugging

### Common Issues

**Build Errors:**
```bash
# Clear cache and reinstall
rm -rf node_modules package-lock.json
npm install

# Check TypeScript errors
npm run type-check
```

**Database Connection:**
```bash
# Test Supabase connection
npm run db:studio

# Run migrations on Supabase
npm run db:migrate

# Generate new migration
npm run db:generate
```

**Navigation Issues:**
- Ensure all buttons use `useRouter` from `next/navigation`
- Check that route paths match the file structure in `src/app/`
- Verify client components have `"use client"` directive

### Development Tools
- **React DevTools**: Available in browser
- **Drizzle Studio**: Database GUI at `/api/db-studio`
- **Supabase Dashboard**: Full database management at supabase.com
- **Network Tab**: Monitor API requests
- **Console Logs**: Server logs in terminal

## 📦 Key Dependencies

### Core Libraries
```json
{
  "next": "^14.2.0",
  "react": "^18.3.1",
  "typescript": "^5.6.3",
  "drizzle-orm": "^0.39.1",
  "postgres": "^3.4.4"
}
```

### UI & Styling
```json
{
  "tailwindcss": "^3.4.17",
  "@radix-ui/react-*": "^1.0.0",
  "lucide-react": "^0.453.0",
  "class-variance-authority": "^0.7.1"
}
```

### State & Forms
```json
{
  "@tanstack/react-query": "^5.60.5",
  "react-hook-form": "^7.55.0",
  "zod": "^3.24.2",
  "@hookform/resolvers": "^3.10.0"
}
```

## 🎯 Feature Development Guide

### Adding New Pages
1. Create page component in `src/app/[page-name]/page.tsx`
2. Add navigation using `useRouter` from `next/navigation`
3. Create API endpoints in `src/app/api/` if needed
4. Add database schema updates
5. Test mobile responsiveness

### Document Upload Flow
1. **Frontend**: File upload component with drag-and-drop
2. **API**: Supabase Storage integration for file handling
3. **Database**: Save file metadata to PostgreSQL via Drizzle
4. **AI Processing**: Mock document analysis
5. **Real-time**: Live status updates via Supabase subscriptions
6. **Feedback**: Show upload progress and success states

### Form Validation
1. Define Zod schema in `/shared/schemas.ts`
2. Use schema in both client and server
3. Add React Hook Form integration
4. Display validation errors with toast notifications

## 🔐 Security Considerations

### File Upload Security
- Validate file types and sizes client and server-side
- Use Supabase Storage policies for access control
- Sanitize file names before storage
- Implement virus scanning if needed
- Set up proper CORS policies

### Data Protection
- Use Supabase Row Level Security (RLS)
- Hash passwords with bcrypt
- Use HTTPS in production
- Implement rate limiting
- Validate all inputs with Zod

### Session Management
- Secure session cookies
- Implement session timeout with Supabase Auth
- Clear sensitive data on logout
- Use Supabase's built-in auth features

## 🚀 Performance Tips

### Frontend Optimization
- Use React.memo for expensive components
- Implement virtual scrolling for large lists
- Lazy load images and documents
- Optimize bundle size with code splitting

### Backend Optimization
- Use Supabase connection pooling
- Implement database connection pooling with Drizzle
- Add response caching headers
- Compress API responses
- Use database indexes for queries
- Leverage Supabase Edge Functions for compute-heavy tasks

### Mobile Performance
- Optimize images for mobile screens
- Minimize JavaScript bundle size
- Use service workers for offline functionality
- Implement progressive loading

## 🛣️ Routing Guide

### Page Routes
- `/` - Landing page (`src/app/page.tsx`)
- `/upload` - Document upload page (`src/app/upload/page.tsx`)
- `/review` - AI analysis review page (`src/app/review/page.tsx`)

### Navigation Implementation
```typescript
import { useRouter } from 'next/navigation'

export function MyComponent() {
  const router = useRouter()
  
  const handleNavigation = () => {
    router.push('/upload')  // Navigate to upload page
    router.back()           // Go back
    router.forward()        // Go forward
  }
}
```

### API Routes
- `/api/documents` - Document upload and management
- `/api/analysis` - AI document analysis
- `/api/applications` - Application management

---

## 🆘 Getting Help

1. **Check Console**: Look for error messages in browser/terminal console
2. **Review Logs**: Check server logs in terminal
3. **Database Issues**: Use Drizzle Studio to inspect data
4. **UI Problems**: Use React DevTools to debug components
5. **API Testing**: Use browser Network tab or Postman
6. **Navigation Issues**: Verify router usage and route paths

Happy coding! 🇨🇦
5. **API Testing**: Use browser Network tab or Postman

Happy coding! 🇨🇦