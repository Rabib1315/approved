---
alwaysApply: true
---

# VisaNavigator Development Rules

## Application Overview
**VisaNavigator** is an AI-powered Canadian student visa application assistant that helps international students navigate the complex process of obtaining a study permit. The application provides document management, AI-powered analysis, application building, strength assessment, and progress tracking.

## Tech Stack
- **Frontend**: Next.js 15, React 19, TypeScript, Tailwind CSS, shadcn/ui, Framer Motion
- **Backend**: Drizzle ORM, PostgreSQL, Supabase
- **Auth**: Clerk
- **File Upload**: React Dropzone
- **State Management**: React Query (TanStack Query)

## File Structure
```
actions/              # Server actions (visa-actions.ts, auth-actions.ts, upload-actions.ts)
app/                  # Next.js app directory
├── globals.css       # Tailwind imports
├── layout.tsx        # Root layout with ClerkProvider
├── page.tsx          # Landing page
├── upload/           # Document upload page
├── builder/          # Application builder page
├── review/           # Application review page
└── package/          # Final package generation
components/
├── ui/              # shadcn/ui components
├── header.tsx       # Shared header component
└── upload/          # Upload-specific components
db/
├── index.ts         # Database connection
├── schema/          # Drizzle schemas (*-schema.ts)
└── migrations/      # Auto-generated migrations
lib/                 # Utilities (utils.ts, dev-delay.ts)
middleware.ts        # Clerk auth middleware
```

## Naming Conventions
- Use **kebab-case** for all files and folders
- Server Actions: `*-actions.ts` (visa-actions.ts, upload-actions.ts)
- Database Schemas: `*-schema.ts` (applications-schema.ts, documents-schema.ts)
- Export client components as: `export const MyComponent`
- Export server components as: `export default function MyPage`

## Server Actions Pattern
```typescript
"use server"

import { db } from "@/db"
import { applications } from "@/db/schema/applications-schema"
import { requireUserId } from "./auth-actions"
import { eq, desc, and } from "drizzle-orm"

export async function getApplications() {
  try {
    const userId = await requireUserId()
    const userApplications = await db
      .select()
      .from(applications)
      .where(eq(applications.user_id, userId))
      .orderBy(desc(applications.created_at))
    return userApplications
  } catch (error) {
    console.error("Error fetching applications:", error)
    throw new Error("Failed to fetch applications")
  }
}
```

## Database Schema Pattern
```typescript
// db/schema/applications-schema.ts
import { pgTable, serial, text, timestamp, boolean } from "drizzle-orm/pg-core"

export const applications = pgTable("applications", {
  id: serial("id").primaryKey(),
  user_id: text("user_id").notNull(),
  status: text("status").notNull().default("draft"),
  institution: text("institution").notNull(),
  program: text("program").notNull(),
  start_date: text("start_date").notNull(),
  total_cost: text("total_cost").notNull(),
  strength_score: text("strength_score"),
  created_at: timestamp("created_at").defaultNow().notNull(),
  updated_at: timestamp("updated_at")
    .defaultNow()
    .notNull()
    .$onUpdate(() => new Date())
})

export type InsertApplication = typeof applications.$inferInsert
export type SelectApplication = typeof applications.$inferSelect
```

## Client Component Pattern
```typescript
"use client"

import { useState } from "react"
import { motion } from "framer-motion"
import { createApplication } from "@/actions/visa-actions"

export const ApplicationBuilder = ({ initialData }: ApplicationBuilderProps) => {
  const [application, setApplication] = useState(initialData)

  const handleSave = async (formData: FormData) => {
    try {
      const updatedApp = await createApplication({
        institution: formData.get('institution') as string,
        program: formData.get('program') as string,
        start_date: formData.get('start_date') as string,
        total_cost: formData.get('total_cost') as string
      })
      setApplication(updatedApp)
    } catch (error) {
      console.error('Failed to save application:', error)
    }
  }

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="max-w-4xl mx-auto p-6"
    >
      <ApplicationForm application={application} onSubmit={handleSave} />
    </motion.div>
  )
}
```

## Server Page Pattern
```typescript
// Always fetch data in server components and pass to client components
import { getApplication } from "@/actions/visa-actions"
import { ApplicationBuilder } from "./components/application-builder"

export default async function BuilderPage() {
  return (
    <>
      <Header title="Application Builder" showBackButton={true} />
      <div className="container mx-auto px-4 py-8">
        <h1 className="text-3xl font-bold mb-8">Build Your Application</h1>
        <Suspense fallback={<LoadingSpinner />}>
          <BuilderContent />
        </Suspense>
      </div>
    </>
  )
}

async function BuilderContent() {
  const application = await getApplication()
  return <ApplicationBuilder initialData={application} />
}
```

## Document Upload Pattern
```typescript
// Upload handling with proper file validation
export async function uploadDocument(formData: FormData) {
  try {
    const userId = await requireUserId()
    const file = formData.get('file') as File
    const documentType = formData.get('type') as string
    
    // Validate file type and size
    if (!file || file.size > 10 * 1024 * 1024) { // 10MB limit
      throw new Error("Invalid file")
    }
    
    // Upload to storage and save metadata to database
    const document = await saveDocument({
      user_id: userId,
      type: documentType,
      filename: file.name,
      size: file.size
    })
    
    return document
  } catch (error) {
    console.error("Error uploading document:", error)
    throw new Error("Failed to upload document")
  }
}
```

## Auth Setup
```typescript
// middleware.ts
import { clerkMiddleware, createRouteMatcher } from "@clerk/nextjs/server"

const isPublicRoute = createRouteMatcher(["/", "/sign-in(.*)"])

export default clerkMiddleware(async (auth, req) => {
  if (!isPublicRoute(req)) {
    await auth.protect()
  }
})

// actions/auth-actions.ts
import { auth } from "@clerk/nextjs/server"

export async function requireUserId(): Promise<string> {
  const { userId } = await auth()
  if (!userId) throw new Error("Authentication required")
  return userId
}
```

## Database Commands
```bash
npm run db:generate  # Generate migrations from schema changes
npm run db:migrate   # Apply migrations
npm run db:seed      # Seed with sample data
```

## Key Rules
1. **Always** fetch data in server components, pass to client components
2. **Always** use `requireUserId()` in server actions for auth
3. **Always** verify user ownership: `and(eq(table.id, id), eq(table.user_id, userId))`
4. **Always** use proper error handling in server actions
5. **Always** validate file uploads (type, size, security)
6. Use Framer Motion for animations
7. Use shadcn/ui components
8. Export client components as named exports
9. Use kebab-case for all file names
10. **Always** handle document uploads securely with proper validation
11. **Always** provide loading states for async operations
12. **Always** implement proper form validation with Zod schemas
6. Use shadcn/ui components
7. Export client components as named exports
8. Use kebab-case for all file names